// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/stc-ds-databricks-go/orm/model"
)

func newSfCadenceDetails(db *gorm.DB, opts ...gen.DOOption) sfCadenceDetails {
	_sfCadenceDetails := sfCadenceDetails{}

	_sfCadenceDetails.sfCadenceDetailsDo.UseDB(db, opts...)
	_sfCadenceDetails.sfCadenceDetailsDo.UseModel(&model.SfCadenceDetails{})

	tableName := _sfCadenceDetails.sfCadenceDetailsDo.TableName()
	_sfCadenceDetails.ALL = field.NewAsterisk(tableName)
	_sfCadenceDetails.Id = field.NewString(tableName, "Id")
	_sfCadenceDetails.isDeleted = field.NewBool(tableName, "isDeleted")
	_sfCadenceDetails.Name = field.NewString(tableName, "Name")
	_sfCadenceDetails.CreatedDate = field.NewTime(tableName, "CreatedDate")
	_sfCadenceDetails.CreatedById = field.NewString(tableName, "CreatedById")
	_sfCadenceDetails.LastModifiedDate = field.NewTime(tableName, "LastModifiedDate")
	_sfCadenceDetails.LastModifiedById = field.NewString(tableName, "LastModifiedById")
	_sfCadenceDetails.SystemModstamp = field.NewTime(tableName, "SystemModstamp")
	_sfCadenceDetails.LastViewedDate = field.NewString(tableName, "LastViewedDate")
	_sfCadenceDetails.LastReferencedDate = field.NewString(tableName, "LastReferencedDate")
	_sfCadenceDetails.Factorsoft_Client_Number__c = field.NewString(tableName, "Factorsoft_Client_Number__c")
	_sfCadenceDetails.First_Funding_Date__c = field.NewTime(tableName, "First_Funding_Date__c")
	_sfCadenceDetails.Last_Funding_Date__c = field.NewTime(tableName, "Last_Funding_Date__c")
	_sfCadenceDetails.Balance__c = field.NewFloat64(tableName, "Balance__c")
	_sfCadenceDetails.Active__c = field.NewBool(tableName, "Active__c")
	_sfCadenceDetails.Sub_Account__c = field.NewString(tableName, "Sub_Account__c")
	_sfCadenceDetails.Legacy_CRM_ID__c = field.NewString(tableName, "Legacy_CRM_ID__c")
	_sfCadenceDetails.Opportunity__c = field.NewString(tableName, "Opportunity__c")
	_sfCadenceDetails.Account__c = field.NewString(tableName, "Account__c")
	_sfCadenceDetails.Factorsoft_Client_Key__c = field.NewFloat64(tableName, "Factorsoft_Client_Key__c")
	_sfCadenceDetails.Exit_Reason__c = field.NewString(tableName, "Exit_Reason__c")
	_sfCadenceDetails.Client_Setup_Sent_to_RTS_Pro__c = field.NewBool(tableName, "Client_Setup_Sent_to_RTS_Pro__c")
	_sfCadenceDetails.Exit_Notes__c = field.NewString(tableName, "Exit_Notes__c")
	_sfCadenceDetails.Fuel_Card_Group_Code__c = field.NewString(tableName, "Fuel_Card_Group_Code__c")
	_sfCadenceDetails.Fuel_Status_Group_Code__c = field.NewString(tableName, "Fuel_Status_Group_Code__c")
	_sfCadenceDetails.Pilot_Travel_Centers_LLC_Broker_Code__c = field.NewBool(tableName, "Pilot_Travel_Centers_LLC_Broker_Code__c")
	_sfCadenceDetails.Account_Rep__c = field.NewString(tableName, "Account_Rep__c")
	_sfCadenceDetails.Cadence_Operations_Manager__c = field.NewString(tableName, "Cadence_Operations_Manager__c")
	_sfCadenceDetails.Cadence_Supervisor__c = field.NewString(tableName, "Cadence_Supervisor__c")
	_sfCadenceDetails.Client_Credit_Rating__c = field.NewString(tableName, "Client_Credit_Rating__c")
	_sfCadenceDetails.Competitor_Moved_To__c = field.NewString(tableName, "Competitor_Moved_To__c")
	_sfCadenceDetails.Exit_Code__c = field.NewString(tableName, "Exit_Code__c")
	_sfCadenceDetails.First_Fund_Exceptions__c = field.NewString(tableName, "First_Fund_Exceptions__c")
	_sfCadenceDetails.Last_Month_Volume__c = field.NewFloat64(tableName, "Last_Month_Volume__c")
	_sfCadenceDetails.UCC_Filing_Group_Code__c = field.NewString(tableName, "UCC_Filing_Group_Code__c")
	_sfCadenceDetails.Value__c = field.NewString(tableName, "Value__c")
	_sfCadenceDetails.WO_Reason__c = field.NewString(tableName, "WO_Reason__c")
	_sfCadenceDetails.Write_Off__c = field.NewString(tableName, "Write_Off__c")
	_sfCadenceDetails.Exit_Date__c = field.NewString(tableName, "Exit_Date__c")
	_sfCadenceDetails._rescued_data = field.NewString(tableName, "_rescued_data")
	_sfCadenceDetails.ChangeEventHeader = field.NewField(tableName, "ChangeEventHeader")
	_sfCadenceDetails.file_path = field.NewString(tableName, "file_path")
	_sfCadenceDetails.file_size = field.NewInt64(tableName, "file_size")
	_sfCadenceDetails.file_modification_time = field.NewTime(tableName, "file_modification_time")
	_sfCadenceDetails.file_name = field.NewString(tableName, "file_name")

	_sfCadenceDetails.fillFieldMap()

	return _sfCadenceDetails
}

type sfCadenceDetails struct {
	sfCadenceDetailsDo

	ALL                                     field.Asterisk
	Id                                      field.String
	isDeleted                               field.Bool
	Name                                    field.String
	CreatedDate                             field.Time
	CreatedById                             field.String
	LastModifiedDate                        field.Time
	LastModifiedById                        field.String
	SystemModstamp                          field.Time
	LastViewedDate                          field.String
	LastReferencedDate                      field.String
	Factorsoft_Client_Number__c             field.String
	First_Funding_Date__c                   field.Time
	Last_Funding_Date__c                    field.Time
	Balance__c                              field.Float64
	Active__c                               field.Bool
	Sub_Account__c                          field.String
	Legacy_CRM_ID__c                        field.String
	Opportunity__c                          field.String
	Account__c                              field.String
	Factorsoft_Client_Key__c                field.Float64
	Exit_Reason__c                          field.String
	Client_Setup_Sent_to_RTS_Pro__c         field.Bool
	Exit_Notes__c                           field.String
	Fuel_Card_Group_Code__c                 field.String
	Fuel_Status_Group_Code__c               field.String
	Pilot_Travel_Centers_LLC_Broker_Code__c field.Bool
	Account_Rep__c                          field.String
	Cadence_Operations_Manager__c           field.String
	Cadence_Supervisor__c                   field.String
	Client_Credit_Rating__c                 field.String
	Competitor_Moved_To__c                  field.String
	Exit_Code__c                            field.String
	First_Fund_Exceptions__c                field.String
	Last_Month_Volume__c                    field.Float64
	UCC_Filing_Group_Code__c                field.String
	Value__c                                field.String
	WO_Reason__c                            field.String
	Write_Off__c                            field.String
	Exit_Date__c                            field.String
	_rescued_data                           field.String
	ChangeEventHeader                       field.Field
	file_path                               field.String
	file_size                               field.Int64
	file_modification_time                  field.Time
	file_name                               field.String

	fieldMap map[string]field.Expr
}

func (s sfCadenceDetails) Table(newTableName string) *sfCadenceDetails {
	s.sfCadenceDetailsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sfCadenceDetails) As(alias string) *sfCadenceDetails {
	s.sfCadenceDetailsDo.DO = *(s.sfCadenceDetailsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sfCadenceDetails) updateTableName(table string) *sfCadenceDetails {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewString(table, "Id")
	s.isDeleted = field.NewBool(table, "isDeleted")
	s.Name = field.NewString(table, "Name")
	s.CreatedDate = field.NewTime(table, "CreatedDate")
	s.CreatedById = field.NewString(table, "CreatedById")
	s.LastModifiedDate = field.NewTime(table, "LastModifiedDate")
	s.LastModifiedById = field.NewString(table, "LastModifiedById")
	s.SystemModstamp = field.NewTime(table, "SystemModstamp")
	s.LastViewedDate = field.NewString(table, "LastViewedDate")
	s.LastReferencedDate = field.NewString(table, "LastReferencedDate")
	s.Factorsoft_Client_Number__c = field.NewString(table, "Factorsoft_Client_Number__c")
	s.First_Funding_Date__c = field.NewTime(table, "First_Funding_Date__c")
	s.Last_Funding_Date__c = field.NewTime(table, "Last_Funding_Date__c")
	s.Balance__c = field.NewFloat64(table, "Balance__c")
	s.Active__c = field.NewBool(table, "Active__c")
	s.Sub_Account__c = field.NewString(table, "Sub_Account__c")
	s.Legacy_CRM_ID__c = field.NewString(table, "Legacy_CRM_ID__c")
	s.Opportunity__c = field.NewString(table, "Opportunity__c")
	s.Account__c = field.NewString(table, "Account__c")
	s.Factorsoft_Client_Key__c = field.NewFloat64(table, "Factorsoft_Client_Key__c")
	s.Exit_Reason__c = field.NewString(table, "Exit_Reason__c")
	s.Client_Setup_Sent_to_RTS_Pro__c = field.NewBool(table, "Client_Setup_Sent_to_RTS_Pro__c")
	s.Exit_Notes__c = field.NewString(table, "Exit_Notes__c")
	s.Fuel_Card_Group_Code__c = field.NewString(table, "Fuel_Card_Group_Code__c")
	s.Fuel_Status_Group_Code__c = field.NewString(table, "Fuel_Status_Group_Code__c")
	s.Pilot_Travel_Centers_LLC_Broker_Code__c = field.NewBool(table, "Pilot_Travel_Centers_LLC_Broker_Code__c")
	s.Account_Rep__c = field.NewString(table, "Account_Rep__c")
	s.Cadence_Operations_Manager__c = field.NewString(table, "Cadence_Operations_Manager__c")
	s.Cadence_Supervisor__c = field.NewString(table, "Cadence_Supervisor__c")
	s.Client_Credit_Rating__c = field.NewString(table, "Client_Credit_Rating__c")
	s.Competitor_Moved_To__c = field.NewString(table, "Competitor_Moved_To__c")
	s.Exit_Code__c = field.NewString(table, "Exit_Code__c")
	s.First_Fund_Exceptions__c = field.NewString(table, "First_Fund_Exceptions__c")
	s.Last_Month_Volume__c = field.NewFloat64(table, "Last_Month_Volume__c")
	s.UCC_Filing_Group_Code__c = field.NewString(table, "UCC_Filing_Group_Code__c")
	s.Value__c = field.NewString(table, "Value__c")
	s.WO_Reason__c = field.NewString(table, "WO_Reason__c")
	s.Write_Off__c = field.NewString(table, "Write_Off__c")
	s.Exit_Date__c = field.NewString(table, "Exit_Date__c")
	s._rescued_data = field.NewString(table, "_rescued_data")
	s.ChangeEventHeader = field.NewField(table, "ChangeEventHeader")
	s.file_path = field.NewString(table, "file_path")
	s.file_size = field.NewInt64(table, "file_size")
	s.file_modification_time = field.NewTime(table, "file_modification_time")
	s.file_name = field.NewString(table, "file_name")

	s.fillFieldMap()

	return s
}

func (s *sfCadenceDetails) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sfCadenceDetails) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 45)
	s.fieldMap["Id"] = s.Id
	s.fieldMap["isDeleted"] = s.isDeleted
	s.fieldMap["Name"] = s.Name
	s.fieldMap["CreatedDate"] = s.CreatedDate
	s.fieldMap["CreatedById"] = s.CreatedById
	s.fieldMap["LastModifiedDate"] = s.LastModifiedDate
	s.fieldMap["LastModifiedById"] = s.LastModifiedById
	s.fieldMap["SystemModstamp"] = s.SystemModstamp
	s.fieldMap["LastViewedDate"] = s.LastViewedDate
	s.fieldMap["LastReferencedDate"] = s.LastReferencedDate
	s.fieldMap["Factorsoft_Client_Number__c"] = s.Factorsoft_Client_Number__c
	s.fieldMap["First_Funding_Date__c"] = s.First_Funding_Date__c
	s.fieldMap["Last_Funding_Date__c"] = s.Last_Funding_Date__c
	s.fieldMap["Balance__c"] = s.Balance__c
	s.fieldMap["Active__c"] = s.Active__c
	s.fieldMap["Sub_Account__c"] = s.Sub_Account__c
	s.fieldMap["Legacy_CRM_ID__c"] = s.Legacy_CRM_ID__c
	s.fieldMap["Opportunity__c"] = s.Opportunity__c
	s.fieldMap["Account__c"] = s.Account__c
	s.fieldMap["Factorsoft_Client_Key__c"] = s.Factorsoft_Client_Key__c
	s.fieldMap["Exit_Reason__c"] = s.Exit_Reason__c
	s.fieldMap["Client_Setup_Sent_to_RTS_Pro__c"] = s.Client_Setup_Sent_to_RTS_Pro__c
	s.fieldMap["Exit_Notes__c"] = s.Exit_Notes__c
	s.fieldMap["Fuel_Card_Group_Code__c"] = s.Fuel_Card_Group_Code__c
	s.fieldMap["Fuel_Status_Group_Code__c"] = s.Fuel_Status_Group_Code__c
	s.fieldMap["Pilot_Travel_Centers_LLC_Broker_Code__c"] = s.Pilot_Travel_Centers_LLC_Broker_Code__c
	s.fieldMap["Account_Rep__c"] = s.Account_Rep__c
	s.fieldMap["Cadence_Operations_Manager__c"] = s.Cadence_Operations_Manager__c
	s.fieldMap["Cadence_Supervisor__c"] = s.Cadence_Supervisor__c
	s.fieldMap["Client_Credit_Rating__c"] = s.Client_Credit_Rating__c
	s.fieldMap["Competitor_Moved_To__c"] = s.Competitor_Moved_To__c
	s.fieldMap["Exit_Code__c"] = s.Exit_Code__c
	s.fieldMap["First_Fund_Exceptions__c"] = s.First_Fund_Exceptions__c
	s.fieldMap["Last_Month_Volume__c"] = s.Last_Month_Volume__c
	s.fieldMap["UCC_Filing_Group_Code__c"] = s.UCC_Filing_Group_Code__c
	s.fieldMap["Value__c"] = s.Value__c
	s.fieldMap["WO_Reason__c"] = s.WO_Reason__c
	s.fieldMap["Write_Off__c"] = s.Write_Off__c
	s.fieldMap["Exit_Date__c"] = s.Exit_Date__c
	s.fieldMap["_rescued_data"] = s._rescued_data
	s.fieldMap["ChangeEventHeader"] = s.ChangeEventHeader
	s.fieldMap["file_path"] = s.file_path
	s.fieldMap["file_size"] = s.file_size
	s.fieldMap["file_modification_time"] = s.file_modification_time
	s.fieldMap["file_name"] = s.file_name
}

func (s sfCadenceDetails) clone(db *gorm.DB) sfCadenceDetails {
	s.sfCadenceDetailsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sfCadenceDetails) replaceDB(db *gorm.DB) sfCadenceDetails {
	s.sfCadenceDetailsDo.ReplaceDB(db)
	return s
}

type sfCadenceDetailsDo struct{ gen.DO }

type ISfCadenceDetailsDo interface {
	gen.SubQuery
	Debug() ISfCadenceDetailsDo
	WithContext(ctx context.Context) ISfCadenceDetailsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISfCadenceDetailsDo
	WriteDB() ISfCadenceDetailsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISfCadenceDetailsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISfCadenceDetailsDo
	Not(conds ...gen.Condition) ISfCadenceDetailsDo
	Or(conds ...gen.Condition) ISfCadenceDetailsDo
	Select(conds ...field.Expr) ISfCadenceDetailsDo
	Where(conds ...gen.Condition) ISfCadenceDetailsDo
	Order(conds ...field.Expr) ISfCadenceDetailsDo
	Distinct(cols ...field.Expr) ISfCadenceDetailsDo
	Omit(cols ...field.Expr) ISfCadenceDetailsDo
	Join(table schema.Tabler, on ...field.Expr) ISfCadenceDetailsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISfCadenceDetailsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISfCadenceDetailsDo
	Group(cols ...field.Expr) ISfCadenceDetailsDo
	Having(conds ...gen.Condition) ISfCadenceDetailsDo
	Limit(limit int) ISfCadenceDetailsDo
	Offset(offset int) ISfCadenceDetailsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISfCadenceDetailsDo
	Unscoped() ISfCadenceDetailsDo
	Create(values ...*model.SfCadenceDetails) error
	CreateInBatches(values []*model.SfCadenceDetails, batchSize int) error
	Save(values ...*model.SfCadenceDetails) error
	First() (*model.SfCadenceDetails, error)
	Take() (*model.SfCadenceDetails, error)
	Last() (*model.SfCadenceDetails, error)
	Find() ([]*model.SfCadenceDetails, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SfCadenceDetails, err error)
	FindInBatches(result *[]*model.SfCadenceDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SfCadenceDetails) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISfCadenceDetailsDo
	Assign(attrs ...field.AssignExpr) ISfCadenceDetailsDo
	Joins(fields ...field.RelationField) ISfCadenceDetailsDo
	Preload(fields ...field.RelationField) ISfCadenceDetailsDo
	FirstOrInit() (*model.SfCadenceDetails, error)
	FirstOrCreate() (*model.SfCadenceDetails, error)
	FindByPage(offset int, limit int) (result []*model.SfCadenceDetails, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISfCadenceDetailsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithColumn(column string, value string) (result model.SfCadenceDetails, err error)
}

// SELECT * FROM @@table WHERE @@column=@value
func (s sfCadenceDetailsDo) FilterWithColumn(column string, value string) (result model.SfCadenceDetails, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, value)
	generateSQL.WriteString("SELECT * FROM sf_cadence_details WHERE " + s.Quote(column) + "=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s sfCadenceDetailsDo) Debug() ISfCadenceDetailsDo {
	return s.withDO(s.DO.Debug())
}

func (s sfCadenceDetailsDo) WithContext(ctx context.Context) ISfCadenceDetailsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sfCadenceDetailsDo) ReadDB() ISfCadenceDetailsDo {
	return s.Clauses(dbresolver.Read)
}

func (s sfCadenceDetailsDo) WriteDB() ISfCadenceDetailsDo {
	return s.Clauses(dbresolver.Write)
}

func (s sfCadenceDetailsDo) Session(config *gorm.Session) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Session(config))
}

func (s sfCadenceDetailsDo) Clauses(conds ...clause.Expression) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sfCadenceDetailsDo) Returning(value interface{}, columns ...string) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sfCadenceDetailsDo) Not(conds ...gen.Condition) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sfCadenceDetailsDo) Or(conds ...gen.Condition) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sfCadenceDetailsDo) Select(conds ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sfCadenceDetailsDo) Where(conds ...gen.Condition) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sfCadenceDetailsDo) Order(conds ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sfCadenceDetailsDo) Distinct(cols ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sfCadenceDetailsDo) Omit(cols ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sfCadenceDetailsDo) Join(table schema.Tabler, on ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sfCadenceDetailsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sfCadenceDetailsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sfCadenceDetailsDo) Group(cols ...field.Expr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sfCadenceDetailsDo) Having(conds ...gen.Condition) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sfCadenceDetailsDo) Limit(limit int) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sfCadenceDetailsDo) Offset(offset int) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sfCadenceDetailsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sfCadenceDetailsDo) Unscoped() ISfCadenceDetailsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sfCadenceDetailsDo) Create(values ...*model.SfCadenceDetails) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sfCadenceDetailsDo) CreateInBatches(values []*model.SfCadenceDetails, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sfCadenceDetailsDo) Save(values ...*model.SfCadenceDetails) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sfCadenceDetailsDo) First() (*model.SfCadenceDetails, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SfCadenceDetails), nil
	}
}

func (s sfCadenceDetailsDo) Take() (*model.SfCadenceDetails, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SfCadenceDetails), nil
	}
}

func (s sfCadenceDetailsDo) Last() (*model.SfCadenceDetails, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SfCadenceDetails), nil
	}
}

func (s sfCadenceDetailsDo) Find() ([]*model.SfCadenceDetails, error) {
	result, err := s.DO.Find()
	return result.([]*model.SfCadenceDetails), err
}

func (s sfCadenceDetailsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SfCadenceDetails, err error) {
	buf := make([]*model.SfCadenceDetails, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sfCadenceDetailsDo) FindInBatches(result *[]*model.SfCadenceDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sfCadenceDetailsDo) Attrs(attrs ...field.AssignExpr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sfCadenceDetailsDo) Assign(attrs ...field.AssignExpr) ISfCadenceDetailsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sfCadenceDetailsDo) Joins(fields ...field.RelationField) ISfCadenceDetailsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sfCadenceDetailsDo) Preload(fields ...field.RelationField) ISfCadenceDetailsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sfCadenceDetailsDo) FirstOrInit() (*model.SfCadenceDetails, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SfCadenceDetails), nil
	}
}

func (s sfCadenceDetailsDo) FirstOrCreate() (*model.SfCadenceDetails, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SfCadenceDetails), nil
	}
}

func (s sfCadenceDetailsDo) FindByPage(offset int, limit int) (result []*model.SfCadenceDetails, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sfCadenceDetailsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sfCadenceDetailsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sfCadenceDetailsDo) Delete(models ...*model.SfCadenceDetails) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sfCadenceDetailsDo) withDO(do gen.Dao) *sfCadenceDetailsDo {
	s.DO = *do.(*gen.DO)
	return s
}
